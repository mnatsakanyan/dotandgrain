(window.multistep_editor_jsonpFunction=window.multistep_editor_jsonpFunction||[]).push([[33],{899:function(t,e){t.exports='<au-input-text id="input-text"></au-input-text>\n'},900:function(t,e){t.exports='<style>\n    :host {\n        --au-input-color: var(--theme-font-color);\n        --au-input-color-hover: var(--theme-grey-color);\n        --au-input-color-active: var(--theme-primary-color);\n        --au-input-color-error: var(--theme-error-color);\n        --au-input-color-disabled: var(--theme-border-color);\n        --au-input-color-border: var(--theme-light-grey-color);\n    }\n\n    textarea,\n    input {\n        @apply --au-body1-font;\n        letter-spacing: 0.25px;\n\n        padding: var(--au-widget-padding, 11px 12px);\n\n        box-sizing: border-box;\n        border-radius: 3px;\n        border: none;\n\n        width: 100%;\n        resize: none;\n\n        outline: none;\n\n        transition: box-shadow .25s ease, color .25s ease;\n    }\n\n    .input textarea,\n    .input input {\n        box-shadow: 0 0 0 1px var(--au-input-color-disabled);\n    }\n\n    .input:hover textarea,\n    .input:hover input {\n        box-shadow: 0 0 0 1px var(--au-input-color-border);\n    }\n\n    .input--active textarea,\n    .input--active input,\n    .input--active:hover textarea,\n    .input--active:hover input {\n        box-shadow: 0 0 0 2px var(--au-input-color-active);\n    }\n\n    .input--error textarea,\n    .input--error input,\n    .input--error:hover textarea,\n    .input--error:hover input {\n        box-shadow: 0 0 0 2px var(--au-input-color-error);\n    }\n\n    .input--disabled textarea,\n    .input--disabled input,\n    .input--disabled:hover textarea,\n    .input--disabled:hover input {\n        box-shadow: 0 0 0 2px var(--au-input-color-error);\n    }\n\n    .input__label,\n    .input__support-text {\n        @apply --au-caption-font;\n    }\n\n    .input__label {\n        margin-bottom: 4px;\n    }\n\n    .input__support {\n        margin-top: 4px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .input .input__label,\n    .input .input__support-text {\n        color: var(--au-input-color);\n    }\n\n    .input:hover .input__label,\n    .input:hover .input__support-text {\n        color: var(--au-input-color-hover);\n    }\n\n    .input--active .input__label,\n    .input--active:hover .input__label {\n        color: var(--au-input-color-active);\n    }\n\n    .input--active .input__support-text {\n        color: var(--au-input-color);\n    }\n\n    .input--error .input__label,\n    .input--error .input__support-text,\n    .input--error:hover .input__label,\n    .input--error:hover .input__support-text {\n        color: var(--au-input-color-error);\n    }\n\n    .input--disabled .input__label,\n    .input--disabled .input__support-text,\n    .input--disabled:hover .input__label,\n    .input--disabled:hover .input__support-text {\n        color: var(--au-input-color-disabled);\n    }\n</style>\n\n<div id="input" class="input">\n    <template is="dom-if" if="[[label]]">\n        <div class="input__label">\n            {{label}}\n        </div>\n    </template>\n    <div class="input__input">\n        <template is="dom-if" if="[[isTextArea]]">\n            <textarea placeholder="[[placeholder]]" rows="[[rows]]" value="{{value::input}}" onfocus="[[onFocus]]"\n                      onblur="[[onBlur]]" maxlength="[[maxLength]]"></textarea>\n        </template>\n        <template is="dom-if" if="[[!isTextArea]]">\n            <input placeholder="[[placeholder]]" value="{{value::input}}" maxlength="[[maxLength]]" type="[[type]]"\n                   min="[[minValue]]" max="[[maxValue]]" pattern="[[allowedPattern]]" error-message="[[errorMessage]]"\n                   onfocus="[[onFocus]]" onblur="[[onBlur]]" invalid="{{invalid}}"/>\n        </template>\n    </div>\n    <template is="dom-if" if="[[supportText]]">\n        <div class="input__support">\n            <span class="input__support-text">\n                {{supportText}}\n            </span>\n            <template is="dom-if" if="[[maxLength]]">\n                <span class="input__support-length">\n                    {{value.length}}/{{maxLength}}\n                </span>\n            </template>\n        </div>\n    </template>\n</div>'},965:function(t,e,n){"use strict";n.r(e),n.d(e,"AuWidgetInputText",function(){return v}),n.d(e,"widget",function(){return v});var i=n(0),a=n(899),r=n(172),o=n(1),u=n(6),s=n(900),l=n(15),p=n(44),h=n(28),d=n(14),c=n(101);let b=class extends(Object(c.a)(l.a)){constructor(){super(),this.widget=null,this.defaultValue="",this.allowedPattern=".*",this.type="text",this.invalid=!1,this.rows=3,this.errorMessage="",this._configuration={},this.onFocus=this.onFocus.bind(this),this.onBlur=this.onBlur.bind(this),this.onError=this.onError.bind(this),this.nonError=this.nonError.bind(this)}clearSelection(){this.value=""}_getCastedValue(){return"number"===this.type?Number(this.value):this.value}validateConstrains(t){let e=(t,e,n)=>e(t)?p.Either.left(n(t)):p.Either.right(t);switch(this.type){case"number":return p.Either.right(t.toString()).bind(t=>e(t,t=>u.a.isNullOrEmptyString(t),t=>new Error(this.tryLocalize(["input.number.validation.valueIsNullOrEmpty"])))).map(t=>Number(t)).bind(t=>e(t,t=>isNaN(t),e=>new Error(this.tryLocalize(["input.number.validation.typeMismatch","value",t])))).bind(t=>e(t,t=>u.a.isNotUndefined(this.maxLength)&&t<=0||Math.floor(Math.log10(t)+1)>this.maxLength,e=>new Error(this.tryLocalize(["input.number.validation.tooMuchSymbols","value",t,"maxValueLength",this.maxLength])))).bind(t=>e(t,t=>t<this.minValue,e=>new Error(this.tryLocalize(["input.number.validation.valueIsTooSmall","value",t,"minValue",this.minValue])))).bind(t=>e(t,t=>t>this.maxValue,e=>new Error(this.tryLocalize(["input.number.validation.valueIsTooBig","value",t,"maxValue",this.maxValue]))));case"text":return p.Either.right(t.toString()).bind(t=>e(t,t=>t.length>this.maxLength,e=>new Error(this.tryLocalize(["input.text.validation.tooMuchSymbols","value",t,"maxValueLength",this.maxLength])))).bind(t=>e(t,t=>!new RegExp(this.allowedPattern,this.patternFlags).test(t),e=>new Error(this.tryLocalize(["input.text.validation.patternMismatch","value",t]))));default:return p.Either.left(new Error(`The input type ${this.type} is not supported`))}}valueChanged(t){this._debouncer=h.a.debounce(this._debouncer,d.d.after(20),()=>{this.validateForm(this.value)})}validateForm(t){this.validateConstrains(t).caseOf({left:t=>{this.onError(t.message),this.widgetEmitChange()},right:t=>{this.value=t,this.nonError(),this.fireEvent("value",{value:this._getCastedValue()})}})}widgetEmitChange(){this.widget&&this.widget.emitChange()}get _(){return this._getCastedValue()}set configuration(t){this._configuration=t,this.updateParams(t)}updateParams(t){this.defaultValue=u.a.isNotNullOrUndefined(t.defaultValue)?t.defaultValue:"",this.minValue=u.a.isNotNullOrUndefined(t.min)?t.min:Number.NEGATIVE_INFINITY,this.maxValue=u.a.isNotNullOrUndefined(t.max)?t.max:Number.POSITIVE_INFINITY,this.placeholder=t.placeholder||t.prompt||"",this.maxLength=t.maxLength,this.isTextArea=t.isTextArea||!1,this.type=!0===t.isNumber?"number":t.type||"text",this.allowedPattern=t.pattern||".*",this.patternFlags=t.patternFlags||"g",this.rows=t.rows||2,this.label=t.label||t.prompt||"",this.supportText=t.supportText||"",u.a.isNotNullOrUndefined(t.value)&&(this.value=t.value),(u.a.isNullOrUndefined(this.value)||""===this.value)&&(this.value=this.defaultValue),setTimeout(()=>{this.valueChanged(this.value),setTimeout(()=>this.valueChanged(this.value),100)},100)}onFocus(){this.$.input.classList.add("input--active")}onBlur(){this.$.input.classList.remove("input--active")}onError(t){u.a.isNotNullOrUndefined(t)&&(this.errorMessage=t,this.supportText=t),this.invalid=!0,this.$.input.classList.add("input--error")}nonError(){this.errorMessage="",this.invalid=!1,this.supportText=this._configuration.supportText,this.$.input.classList.contains("input--error")&&this.$.input.classList.remove("input--error")}tryLocalize(t){try{return this.localize.apply(null,t)}catch(e){return console.warn(`Failed to localize ${t[0]}`),this.localize(t[0])}}};Object(i.b)([Object(o.c)(),Object(i.d)("design:type",Boolean)],b.prototype,"isTextArea",void 0),Object(i.b)([Object(o.c)(),Object(i.d)("design:type",Object)],b.prototype,"value",void 0),Object(i.b)([Object(o.c)(),Object(i.d)("design:type",String)],b.prototype,"placeholder",void 0),Object(i.b)([Object(o.c)(),Object(i.d)("design:type",Number)],b.prototype,"maxLength",void 0),Object(i.b)([Object(o.c)(),Object(i.d)("design:type",Object)],b.prototype,"defaultValue",void 0),Object(i.b)([Object(o.c)(),Object(i.d)("design:type",Number)],b.prototype,"minValue",void 0),Object(i.b)([Object(o.c)(),Object(i.d)("design:type",Number)],b.prototype,"maxValue",void 0),Object(i.b)([Object(o.c)(),Object(i.d)("design:type",String)],b.prototype,"allowedPattern",void 0),Object(i.b)([Object(o.c)(),Object(i.d)("design:type",String)],b.prototype,"type",void 0),Object(i.b)([Object(o.b)("value"),Object(i.d)("design:type",Function),Object(i.d)("design:paramtypes",[Object]),Object(i.d)("design:returntype",void 0)],b.prototype,"valueChanged",null),b=Object(i.b)([Object(o.a)("au-input-text",s),Object(i.d)("design:paramtypes",[])],b);let v=class extends r.b{constructor(){super(...arguments),this._isRestoring=!1}connectedCallback(){super.connectedCallback();const t=this._getInputElement();t.widget=this,t.language=this.language,t.addEventListener("value",t=>{this.value=t.detail.value,this.emitChange({value:this.value}),this._onChange&&this._onChange(this.value)})}clearSelection(){this._getInputElement().value=""}get _(){return this.value}updateParams(t){this._getInputElement().configuration=t,this.defaultValue=t.defaultValue,t.onChange&&(this._onChange=u.a.functionWrapperConstructor(t.onChange))}async exportWidgetData(t){return{text:this.value}}async restoreWidgetFromData(t,e){t&&this.value!==t.text&&(this._isRestoring=!0,this._getInputElement().value=t.text.toString()),this._isRestoring=!1}_getInputElement(){return this.$["input-text"]}get invalid(){return this.$["input-text"].invalid}};Object(i.b)([Object(o.c)(),Object(i.d)("design:type",Object)],v.prototype,"params",void 0),v=Object(i.b)([Object(o.a)("au-widget-input-text",a)],v)}}]);